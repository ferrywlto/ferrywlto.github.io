---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/blog-placeholder-1.jpg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Critical theme initialization - before any CSS -->
<script is:inline>
(function() {
  const theme = localStorage.getItem('theme') || 'light';
  document.documentElement.setAttribute('data-theme', theme);
})();
</script>

<script>
  import Alpine from "alpinejs";

  // Get current theme from localStorage or default to light
  function getCurrentTheme(): string {
    const theme = localStorage.getItem("theme") || "light";
    return theme;
  }

  // Set theme on document
  function setTheme(theme: string): void {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
  }

  // Update all toggle icons and tooltips based on theme
  function updateAllToggleIcons(theme: string): void {
    const toggles = document.querySelectorAll(".theme-toggle");
    toggles.forEach((toggle: Element) => {
      if (toggle instanceof HTMLElement) {
        // Ensure the toggle is an HTMLElement to access dataset
        toggle.textContent = theme === "dark" ? "ðŸŒž" : "ðŸŒš";
        toggle.title =
          theme === "dark"
            ? "Click to switch to light theme"
            : "Click to switch to dark theme";
      }
    });
  }

  // Add click listeners to all theme toggles
  function attachToggleListeners() {
    const toggles = document.querySelectorAll(".theme-toggle");
    toggles.forEach((toggle: Element) => {
      if (toggle instanceof HTMLElement) {
        // Ensure the toggle is an HTMLElement to access dataset
        if (!toggle.dataset.listenerAttached) {
          toggle.addEventListener("click", function () {
            const currentTheme = getCurrentTheme();
            const newTheme = currentTheme === "light" ? "dark" : "light";
            setTheme(newTheme);
            updateAllToggleIcons(newTheme);
          });
          toggle.dataset.listenerAttached = "true";
        }
      }
    });
  }

  // Header component with global theme management
  function initGlobalTheme() {
    // Initialize theme on page load
    const currentTheme = getCurrentTheme();
    // setTheme(currentTheme);
    updateAllToggleIcons(currentTheme);

    // Initial listener attachment
    attachToggleListeners();

    // Re-attach listeners when new toggles are added
    const observer = new MutationObserver(() => {
      attachToggleListeners();
    });

    observer.observe(document.body, { childList: true, subtree: true });
  }

  // Set theme data as early as possible
  // setTheme(getCurrentTheme());

  // Initialize theme system
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initGlobalTheme);
  } else {
    initGlobalTheme();
  }

  // Fallback initialization
  window.addEventListener("load", initGlobalTheme);

  document.addEventListener("alpine:init", () => {
    // Ensure Alpine is initialized
    Alpine.store("drawer", false);
  });
</script>
