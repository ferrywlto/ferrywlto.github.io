---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href, class: className, ...props } = Astro.props;
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + (subpath?.[0] || '');
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<style>
	a {
		display: inline-block;
		text-decoration: none;
		position: relative;
		color: inherit;
		transition: all 0.2s ease;
	}
	
	a.active {
		font-weight: bolder;
	}
	
	/* Remove default underline for active state since parent components handle styling */
	a.active {
		text-decoration: none;
	}
	
	/* Default link styling when used outside of specific containers */
	a:not(:is(.nav-links a, .drawer-nav a)) {
		color: var(--accent);
		padding: var(--space-xs) 0;
		border-bottom: 1px solid transparent;
	}
	
	a:not(:is(.nav-links a, .drawer-nav a)):hover {
		color: var(--accent-dark);
		border-bottom-color: var(--accent);
	}
	
	a:not(:is(.nav-links a, .drawer-nav a)).active {
		color: var(--accent-dark);
		border-bottom-color: var(--accent);
		font-weight: 600;
	}
</style>
