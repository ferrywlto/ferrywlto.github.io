---
import HeaderLink from './HeaderLink.astro';
import Hamburger from './Hamburger.astro';
import DrawerMenu from './DrawerMenu.astro';
import ThemeToggle from './ThemeToggle.astro';
---

<header x-data="{
	open: false,
	toggle() {
		console.log('Toggle called, current open:', this.open);
		this.open = !this.open;
		console.log('New open state:', this.open);
	}
}">
	<nav class="width-constrained-container">
		<Hamburger />
		<div class="hide-on-mobile nav-grid">
      <div class="home-link">
        <HeaderLink href="/">🌐 ferrywl.to</HeaderLink>
      </div>
      <div class="nav-links">
        <HeaderLink href="/blog">📝 Blog</HeaderLink>
        <HeaderLink href="/blog" class="hidden">📓 Diary</HeaderLink>
        <HeaderLink href="/whispers">💬 Quotes</HeaderLink>
        <HeaderLink href="/projects" class="hidden">🚀 Projects</HeaderLink>
        <HeaderLink href="/about">👨🏻‍💻 About</HeaderLink>
      </div>
      <div class="controls">
        <ThemeToggle />
      </div>
		</div>
	</nav>
	<DrawerMenu />
</header>

<style>
  @import "../styles/layout.css";
  @import "../styles/effect.css";

	header {
    display: flex;
		box-sizing: border-box;
    justify-content: center;
    align-items: center;
		position: sticky;
		top: 0;
    width: 100%;
    min-height: 4rem;
    height: 4rem;
    max-height: 4rem;
		background: var(--color-surface);
    border-bottom: var(--elevation-border);
    margin: auto;
	}

	.nav-grid {
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: var(--gap-lg);
    align-items: center;
		width: 100%;
	}

 .home-link {
    display: flex;
    align-items: center;
  }

  .nav-links {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: var(--gap-lg);
  }

  .controls {
    display: flex;
    justify-content: center;
    align-items: center;
  }

	/* Mobile-first: Hide nav-links on small screens */
	@media (max-width: 1024px) {
	}
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const themeToggle = document.getElementById('theme-toggle');

    if (!themeToggle) return;

    // Get current theme from localStorage or default to light
    function getCurrentTheme(): string {
      return localStorage.getItem('theme') || 'light';
    }

    // Set theme on document
    function setTheme(theme: string): void {
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem('theme', theme);
      updateToggleIcon(theme);
    }

    // Update toggle icon and tooltip based on theme
    function updateToggleIcon(theme: string): void {
      if (themeToggle) {
        themeToggle.textContent = theme === 'dark' ? '🌞' : '🌚';
        themeToggle.title = theme === 'dark' ? 'Click to switch to light theme' : 'Click to switch to dark theme';
      }
    }

    // Initialize theme on page load
    const currentTheme = getCurrentTheme();
    setTheme(currentTheme);

    // Toggle theme on click
    themeToggle.addEventListener('click', function() {
      const currentTheme = getCurrentTheme();
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      setTheme(newTheme);
    });
  });
</script>
