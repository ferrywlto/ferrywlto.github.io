---
import HeaderLink from './HeaderLink.astro';
import Hamburger from './Hamburger.astro';
import DrawerMenu from './DrawerMenu.astro';
import ThemeToggle from './ThemeToggle.astro';
---

<header>
	<nav class="width-constrained-container">
		<Hamburger />
		<div class="hide-on-mobile nav-grid">
      <div class="home-link">
        <HeaderLink href="/">🌐 ferrywl.to</HeaderLink>
      </div>
      <div class="nav-links">
        <HeaderLink href="/blog">📝 Blog</HeaderLink>
        <HeaderLink href="/blog">📓 Diary</HeaderLink>
        <HeaderLink href="/whispers">💬 Quotes</HeaderLink>
        <HeaderLink href="/projects">🚀 Projects</HeaderLink>
        <HeaderLink href="/about">👨🏻‍💻 About</HeaderLink>
      </div>
      <div class="controls">
        <ThemeToggle />
      </div>
		</div>
	</nav>
	<DrawerMenu />
</header>

<style>
  @import "../styles/layout.css";
  @import "../styles/effect.css";

	header {
    display: flex;
		box-sizing: border-box;
    justify-content: center;
    align-items: center;
		position: sticky;
		top: 0;
    width: 100%;
    min-height: 4rem;
    height: 4rem;
    max-height: 4rem;
		background: var(--color-surface);
    border-bottom: var(--elevation-border);
    margin: auto;
	}

	.nav-grid {
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: var(--gap-lg);
    align-items: center;
		width: 100%;
	}

 .home-link {
    display: flex;
    align-items: center;
  }

  .nav-links {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: var(--gap-lg);
  }

  .controls {
    display: flex;
    justify-content: center;
    align-items: center;
  }

	/* Mobile-first: Hide nav-links on small screens */
	@media (max-width: 1024px) {
	}
</style>

<script>
  // Header component with global theme management
  function initGlobalTheme() {
    console.log('Initializing global theme system...');

    // Get current theme from localStorage or default to light
    function getCurrentTheme(): string {
      const theme = localStorage.getItem('theme') || 'light';
      console.log('Current theme:', theme);
      return theme;
    }

    // Set theme on document
    function setTheme(theme: string): void {
      console.log('Setting theme to:', theme);
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem('theme', theme);
      updateAllToggleIcons(theme);
      console.log('Theme set successfully');
    }

    // Update all toggle icons and tooltips based on theme
    function updateAllToggleIcons(theme: string): void {
      const toggles = document.querySelectorAll('.theme-toggle');
      toggles.forEach((toggle: Element) => {
        if(toggle instanceof HTMLElement) {
          // Ensure the toggle is an HTMLElement to access dataset
          toggle.textContent = theme === 'dark' ? '🌞' : '🌚';
          toggle.title = theme === 'dark' ? 'Click to switch to light theme' : 'Click to switch to dark theme';
        }
        console.log(`Updated ${toggles.length} toggle icons for theme:`, theme);
      });
    }

    // Initialize theme on page load
    const currentTheme = getCurrentTheme();
    setTheme(currentTheme);

    // Add click listeners to all theme toggles
    function attachToggleListeners() {
      const toggles = document.querySelectorAll('.theme-toggle');
      toggles.forEach((toggle: Element) => {
        if(toggle instanceof HTMLElement) {
          // Ensure the toggle is an HTMLElement to access dataset
          if (!toggle.dataset.listenerAttached) {
            toggle.addEventListener('click', function() {
              const currentTheme = getCurrentTheme();
              const newTheme = currentTheme === 'light' ? 'dark' : 'light';
              console.log(`Theme toggle clicked: from ${currentTheme} to ${newTheme}`);
              setTheme(newTheme);
            });
            toggle.dataset.listenerAttached = 'true';
          }
        }
      });
      console.log(`Attached listeners to ${toggles.length} theme toggles`);
    }

    // Initial listener attachment
    attachToggleListeners();

    // Re-attach listeners when new toggles are added
    const observer = new MutationObserver(() => {
      attachToggleListeners();
    });

    observer.observe(document.body, { childList: true, subtree: true });

    console.log('Global theme system initialized successfully');
  }

  // Initialize theme system
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGlobalTheme);
  } else {
    initGlobalTheme();
  }

  // Fallback initialization
  window.addEventListener('load', initGlobalTheme);
</script>
