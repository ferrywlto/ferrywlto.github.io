---
import MainLayout from '../layouts/MainLayout.astro';
---

<MainLayout title="Height Test" description="Testing header and footer height constraints">
  <main style="padding: 2rem; background: linear-gradient(45deg, #f0f0f0, #e0e0e0); min-height: 60vh;">
    <h1>Height Constraint Test Page</h1>
    
    <div style="background: white; padding: 1rem; border-radius: 8px; margin: 1rem 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
      <h2>Expected Heights</h2>
      <p><strong>Header Height:</strong> <code>68px</code> (fixed)</p>
      <p><strong>Footer Height:</strong> <code>138px</code> (fixed)</p>
    </div>

    <div style="background: white; padding: 1rem; border-radius: 8px; margin: 1rem 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
      <h2>Actual Measured Heights</h2>
      <p><strong>Header Actual:</strong> <span id="actual-header">Measuring...</span></p>
      <p><strong>Footer Actual:</strong> <span id="actual-footer">Measuring...</span></p>
      <p><strong>Status:</strong> <span id="status">Checking...</span></p>
    </div>

    <div style="background: white; padding: 1rem; border-radius: 8px; margin: 1rem 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
      <h2>Screen Size Info</h2>
      <p><strong>Viewport Width:</strong> <span id="viewport-width">Measuring...</span></p>
      <p><strong>Breakpoint:</strong> <span id="breakpoint">Calculating...</span></p>
      <p><strong>Device Pixel Ratio:</strong> <span id="pixel-ratio">Measuring...</span></p>
    </div>

    <div style="background: white; padding: 1rem; border-radius: 8px; margin: 1rem 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
      <h2>Live Constraints Check</h2>
      <button onclick="runHeightTest()" style="background: #367878; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">
        Run Height Test
      </button>
      <div id="test-results" style="margin-top: 1rem; font-family: monospace; white-space: pre-line;"></div>
    </div>

    <script>
      function measureElements() {
        const header = document.querySelector('header');
        const footer = document.querySelector('footer');
        
        const headerHeight = header ? header.offsetHeight : 0;
        const footerHeight = footer ? footer.offsetHeight : 0;
        const width = window.innerWidth;
        
        const actualHeaderEl = document.getElementById('actual-header');
        const actualFooterEl = document.getElementById('actual-footer');
        const viewportWidthEl = document.getElementById('viewport-width');
        const pixelRatioEl = document.getElementById('pixel-ratio');
        const breakpointEl = document.getElementById('breakpoint');
        const statusEl = document.getElementById('status');
        
        if (actualHeaderEl) actualHeaderEl.textContent = headerHeight + 'px';
        if (actualFooterEl) actualFooterEl.textContent = footerHeight + 'px';
        if (viewportWidthEl) viewportWidthEl.textContent = width + 'px';
        if (pixelRatioEl) pixelRatioEl.textContent = window.devicePixelRatio.toString();
        
        // Determine breakpoint
        let breakpoint = 'Desktop (≥720px)';
        if (width < 430) breakpoint = 'Mobile Small (<430px)';
        else if (width < 720) breakpoint = 'Mobile Large (430-719px)';
        if (breakpointEl) breakpointEl.textContent = breakpoint;
        
        // Check if heights match expected values
        const headerExpected = 68;
        const footerExpected = 138;
        const headerMatch = headerHeight === headerExpected;
        const footerMatch = footerHeight === footerExpected;
        
        let status = '';
        if (headerMatch && footerMatch) {
          status = '✅ All heights correct!';
        } else {
          status = '❌ Height constraints not working:';
          if (!headerMatch) status += ` Header: ${headerHeight}px (expected ${headerExpected}px)`;
          if (!footerMatch) status += ` Footer: ${footerHeight}px (expected ${footerExpected}px)`;
        }
        
        if (statusEl) statusEl.textContent = status;
      }
      
      function runHeightTest() {
        const results = [];
        const header = document.querySelector('header');
        const footer = document.querySelector('footer');
        const testResultsEl = document.getElementById('test-results');
        
        if (!header || !footer) {
          if (testResultsEl) testResultsEl.textContent = 'Error: Header or footer not found!';
          return;
        }
        
        const headerStyles = window.getComputedStyle(header);
        const footerStyles = window.getComputedStyle(footer);
        
        results.push('=== HEADER ANALYSIS ===');
        results.push(`Computed height: ${headerStyles.height}`);
        results.push(`Computed max-height: ${headerStyles.maxHeight}`);
        results.push(`Computed box-sizing: ${headerStyles.boxSizing}`);
        results.push(`Computed overflow: ${headerStyles.overflow}`);
        results.push(`Offset height: ${header.offsetHeight}px`);
        results.push(`Client height: ${header.clientHeight}px`);
        results.push('');
        
        results.push('=== FOOTER ANALYSIS ===');
        results.push(`Computed height: ${footerStyles.height}`);
        results.push(`Computed max-height: ${footerStyles.maxHeight}`);
        results.push(`Computed box-sizing: ${footerStyles.boxSizing}`);
        results.push(`Computed overflow: ${footerStyles.overflow}`);
        results.push(`Offset height: ${footer.offsetHeight}px`);
        results.push(`Client height: ${footer.clientHeight}px`);
        results.push('');
        
        results.push('=== CSS VARIABLES ===');
        const rootStyles = window.getComputedStyle(document.documentElement);
        results.push(`--header-height: ${rootStyles.getPropertyValue('--header-height').trim()}`);
        results.push(`--footer-height: ${rootStyles.getPropertyValue('--footer-height').trim()}`);
        
        if (testResultsEl) testResultsEl.textContent = results.join('\n');
      }

      // Measure on load and resize
      window.addEventListener('load', measureElements);
      window.addEventListener('resize', measureElements);
      
      // Update every 2 seconds to catch any dynamic changes
      setInterval(measureElements, 2000);
    </script>
  </main>
</MainLayout>
